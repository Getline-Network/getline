// Copyright 2017 Sergiusz Bazanski <q3k@boson.me>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// Version: 0.1.0
// Follows semver semantics - versions under < 1.0.0 are not considered stable.

package pb;


///////////////////
// Common types. //
///////////////////

// Address is an Ethereum address. It contains both an ASCII and raw byte
// representation of an address. At least one must be set. If both are set
// and do not represent the same data, the consumer MUST throw an error.
message Address {
    bytes raw = 1;
    string ascii = 2;
}


////////////////////////
// GetLine Loan Cache //
////////////////////////

// The state of a GetLine Loan contract, to be used as a cache.
// See contract Solidity source for more information. This is returned
// unopinionated, straight from the blockchain.
message LoanState {
    reserved 1, 2;
    bytes fundraising_deadline = 3;
    bytes payback_deadline = 4;

    enum State {
        INVALID = 0;

        COLLATERAL_COLLECTION = 1;
        FUNDRAISING = 2;
        PAYBACK = 3;
        FINISHED = 4;
    }
    State current_state = 5;
}

// Parameters with which a GetLine Loan was created.
message LoanParameters {
    Address collateral_token = 1;
    Address loan_token = 2;
    Address liege = 3;
    string amount_wanted = 4;
    uint32 interest_permil = 5;
    string fundraising_blocks_count = 6;
    string payback_blocks_count = 7;
}

// The cache entry of the metabackend service - contains the parameters of the
// loan, a cache of its' state on the blockchain (if deployed) and owner/
// deployment addresses.
message LoanCache {
    LoanParameters parameters = 1;
    LoanState blockchain_state = 2;
    string short_id = 6;
    string description = 7;

    enum DeploymentState {
        INVALID = 0;

        UNDEPLOYED = 1;
        DEPLOYED = 2;
    }
    DeploymentState deployment_state = 3;
    Address deployment_address = 4;
    Address owner = 5;
}


///////////////////////////////////
// Ethereum Contract & ABI types //
///////////////////////////////////

// More-or-less follows the official JSON ABI Spec.

// A function, constructor or fallback function in an Ethereum contract.
message ABIFunction {
    enum Type {
        INVALID = 0;

        FUNCTION = 1;
        CONSTRUCTOR = 2;
        FALLBACK = 3;
    }
    Type type = 1;
    string name = 2;

    message InputOutput {
        string name = 1;
        string type = 2;
    }
    repeated InputOutput inputs = 3;
    repeated InputOutput outputs = 4;
    bool constant = 5;
    bool payable = 6;
}

// An event type of an Ethereum contract.
message ABIEvent {
    string name = 1;
    message Input {
        string name = 1;
        string type = 2;
        bool indexed = 3;
    }
    repeated Input inputs = 2;
    bool anonymous = 3;
}

// The Application Binary Interface of an Ethereum contract - contains event
// and function definitions. It also contains a JSON representation of the
// above, to be consumed by legacy systems.
message ABI {
    repeated ABIFunction functions = 1;
    repeated ABIEvent events = 2;
    bytes json = 3;
}

// An Ethereum contract, possibly deployed at an address.
message Contract {
    // Name of the Contract type.
    string name = 1;
    // Address on the blockchain, if deployed.
    Address address = 2;
    // Fully linked bytecode of the contract, if available.
    string linked_binary = 3;
    // ABI definition of the contract, if available.
    ABI abi = 4;
}

/////////
// RPC //
/////////

message GetDeploymentRequest {
    // Network ID of the deployment.
    string network_id = 1;
}

message GetDeploymentResponse {
    // Network ID of the deployment, for confirmation.
    string network_id = 1;
    // Contract/Library code and ABIs that we know of in this deployment.
    repeated Contract contract = 2;
}

message GetLoansRequest {
    // Network ID of the loans we want to get.
    string network_id = 1;
    // If set, filter by owner of contract.
    Address owner = 2;
    // If set, filter by contract short ID.
    string short_id = 3;
}

message GetLoansResponse {
    // Network ID of the loans, for confirmation.
    string network_id = 1;
    // Cached data of indexed loans.
    repeated LoanCache loan_cache = 2;
}

message IndexLoanRequest {
    // NetworkID in which the loan is deployed.
    string network_id = 1;
    // Address of the deployed loan.
    Address loan = 2;
    // Non-blockchain user data: description of loan.
    string description = 3;
}

message IndexLoanResponse {
    // Resulting short ID of the indexed loan.
    string short_id = 1;
}

service Metabackend {
    // GetDeployment returns all GetLine Ethereum contracts deployed on a given
    // network ID.
    rpc GetDeployment(GetDeploymentRequest) returns (GetDeploymentResponse);
    // GetLoans returns indexed Loan contracts according to a filter.
    rpc GetLoans(GetLoansRequest) returns (GetLoansResponse);
    // IndexLoan indexes a loan to be served from the metabackend.
    // This method is idempotent - it will return the same indexed ShortID no
    // matter how many times the contract is submitted.
    rpc IndexLoan(IndexLoanRequest) returns (IndexLoanResponse);
}
